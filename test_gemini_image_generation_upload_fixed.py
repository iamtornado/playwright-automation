"""
GeminiÂõæÁâáÁîüÊàêÊµãËØïËÑöÊú¨ - ‰øÆÂ§çÊñá‰ª∂‰∏ä‰º†ÈóÆÈ¢ò
"""

import pytest
import sys
import os
import time
from datetime import datetime
from playwright.sync_api import sync_playwright, expect

def test_gemini_image_generation():
    """
    ÊµãËØïGeminiÂõæÁâáÁîüÊàêÂäüËÉΩ - ‰øÆÂ§çÊñá‰ª∂‰∏ä‰º†
    """
    print("=" * 80)
    print("GeminiÂõæÁâáÁîüÊàêÊµãËØïËÑöÊú¨ - ‰øÆÂ§çÊñá‰ª∂‰∏ä‰º†ÈóÆÈ¢ò")
    print("=" * 80)
    
    # ÈÖçÁΩÆÂèÇÊï∞
    debug_port = "9222"
    downloads_dir = os.path.join(os.getcwd(), "generated_images")
    os.makedirs(downloads_dir, exist_ok=True)
    
    # ÊµãËØïÊñá‰ª∂Ë∑ØÂæÑ
    markdown_file = "D:/Users/14266/Downloads/ËøúÁ®ãÊâπÈáèÂä†ÂüüÔºàwsmanÂçèËÆÆÂíå‰º†ÁªüÁöÑÂçèËÆÆRPCÔºâ.md"
    
    # ÂõæÁâáÁîüÊàêÊèêÁ§∫ËØç
    prompt_text = "Ê†πÊçÆÊàëÊèê‰æõÁöÑmarkdownÊñá‰ª∂ÔºåËØ∑ÁîüÊàêÂêàÈÄÇÁöÑÊñáÁ´†Â∞ÅÈù¢„ÄÇÂõæÁâáÁöÑÊØî‰æã‰∏∫16:9"
    
    print(f"üîó ËøûÊé•Âà∞ChromeÂÆû‰æã (Á´ØÂè£: {debug_port})")
    print(f"üìÅ ÂõæÁâá‰øùÂ≠òÁõÆÂΩï: {downloads_dir}")
    print(f"üìÑ ‰ΩøÁî®ÁöÑMarkdownÊñá‰ª∂: {markdown_file}")
    print(f"üí≠ ÂõæÁâáÁîüÊàêÊèêÁ§∫: {prompt_text}")
    print()
    
    try:
        with sync_playwright() as playwright:
            # ËøûÊé•Âà∞Áé∞ÊúâChromeÂÆû‰æã
            browser = playwright.chromium.connect_over_cdp(f"http://localhost:{debug_port}")
            
            print(f"‚úÖ ÊàêÂäüËøûÊé•Âà∞ChromeÂÆû‰æã")
            
            if not browser.contexts:
                print("‚ùå Ê≤°ÊúâÊâæÂà∞ÊµèËßàÂô®‰∏ä‰∏ãÊñáÔºåËØ∑Á°Æ‰øùChrome‰∏≠ÊâìÂºÄ‰∫ÜGeminiÈ°µÈù¢")
                return
            
            context = browser.contexts[0]
            pages = context.pages
            
            if not pages:
                print("‚ùå Ê≤°ÊúâÊâæÂà∞Ê†áÁ≠æÈ°µÔºåËØ∑Âú®Chrome‰∏≠ÊâìÂºÄGeminiÈ°µÈù¢")
                return
            
            # ‰ΩøÁî®ÂΩìÂâçÊ¥ªË∑ÉÈ°µÈù¢
            page = pages[-1]
            print(f"üìñ ‰ΩøÁî®Ê†áÁ≠æÈ°µ: {page.title()}")
            print(f"üåê ÂΩìÂâçURL: {page.url}")
            
            # ËÆæÁΩÆ‰∏ãËΩΩ‰∫ã‰ª∂ÁõëÂê¨
            downloaded_files = []
            
            def handle_download(download):
                """Â§ÑÁêÜ‰∏ãËΩΩ‰∫ã‰ª∂"""
                try:
                    original_filename = download.suggested_filename
                    print(f"üì• Ê£ÄÊµãÂà∞ÂõæÁâá‰∏ãËΩΩ: {original_filename}")
                    
                    if original_filename:
                        name_part, ext_part = os.path.splitext(original_filename)
                    else:
                        name_part = "gemini_generated_image"
                        ext_part = ".png"
                    
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename_with_timestamp = f"{name_part}_{timestamp}{ext_part}"
                    file_path = os.path.join(downloads_dir, filename_with_timestamp)
                    
                    download.save_as(file_path)
                    downloaded_files.append(file_path)
                    
                    print(f"‚úÖ ÂõæÁâáÂ∑≤‰øùÂ≠òÂà∞: {file_path}")
                    
                except Exception as e:
                    print(f"‚ùå ‰∏ãËΩΩÂ§ÑÁêÜÂ§±Ë¥•: {e}")
            
            page.on("download", handle_download)
            
            print()
            print("üé® ÂºÄÂßãÊâßË°åGeminiÂõæÁâáÁîüÊàêÊµÅÁ®ã...")
            print("-" * 60)
            
            try:
                # 1. ÁÇπÂáªÂ∑•ÂÖ∑ÊåâÈíÆ
                print("1Ô∏è‚É£ ÁÇπÂáªÂ∑•ÂÖ∑ÊåâÈíÆ...")
                page.get_by_role("button", name="Â∑•ÂÖ∑").click()
                page.wait_for_timeout(1000)
                
                # 2. ÈÄâÊã©ImagenÁîüÊàêÂõæÁâá
                print("2Ô∏è‚É£ ÈÄâÊã©ImagenÁîüÊàêÂõæÁâá...")
                page.get_by_role("button", name="‰ΩøÁî® Imagen ÁîüÊàêÂõæÁâá").click()
                page.wait_for_timeout(2000)
                
                # 3. ÊâìÂºÄÊñá‰ª∂‰∏ä‰º†ËèúÂçï
                print("3Ô∏è‚É£ ÊâìÂºÄÊñá‰ª∂‰∏ä‰º†ËèúÂçï...")
                page.get_by_role("button", name="ÊâìÂºÄÊñá‰ª∂‰∏ä‰º†ËèúÂçï").click()
                page.wait_for_timeout(1000)
                
                # # 4. ÁÇπÂáªÊñá‰ª∂‰∏ä‰º†ÊåâÈíÆ
                # print("4Ô∏è‚É£ ÈÄâÊã©Êñá‰ª∂‰∏ä‰º†...")
                # page.locator("[data-test-id=\"local-image-file-uploader-button\"]").click()
                # page.wait_for_timeout(1000)
                with page.expect_file_chooser() as fc_info:
                    page.locator("[data-test-id=\"local-image-file-uploader-button\"]").click()
            
                file_chooser = fc_info.value
                file_chooser.set_files(markdown_file)
                # # 5. Êñá‰ª∂‰∏ä‰º† - ÂÖ≥ÈîÆ‰øÆÂ§çÔºö‰ΩøÁî®Ê≠£Á°ÆÁöÑÊñπÊ≥ï
                # print(f"5Ô∏è‚É£ ‰∏ä‰º†MarkdownÊñá‰ª∂...")
                # if os.path.exists(markdown_file):
                #     upload_success = False
                    
                    # # ÊñπÊ≥ï1ÔºöÁõ¥Êé•ÂØπÈöêËóèÁöÑinputËÆæÁΩÆÊñá‰ª∂ÔºàÂº∫Âà∂ÊñπÂºè + UIÁä∂ÊÄÅÂ§ÑÁêÜÔºâ
                    # try:
                    #     print("   üìÇ ÊñπÊ≥ï1ÔºöÁõ¥Êé•ËÆæÁΩÆÈöêËóèÁöÑÊñá‰ª∂ËæìÂÖ•Ê°Ü...")
                    #     
                    #     # ÊâæÂà∞ÈöêËóèÁöÑÊñá‰ª∂ËæìÂÖ•Ê°ÜÂπ∂Âº∫Âà∂ËÆæÁΩÆÊñá‰ª∂
                    #     file_input = page.locator("input[type='file'][name='Filedata']")
                    #     if file_input.count() > 0:
                    #         # ‰ΩøÁî®JavaScriptÂº∫Âà∂ËÆæÁΩÆÊñá‰ª∂
                    #         file_input.set_input_files(markdown_file)
                    #         page.wait_for_timeout(2000)
                    #         print("   ‚úÖ ÊñπÊ≥ï1ÊàêÂäüÔºöÁõ¥Êé•ËÆæÁΩÆÊñá‰ª∂ËæìÂÖ•Ê°Ü")
                    #         
                    #         # ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÂ§ÑÁêÜÊñá‰ª∂ÈÄâÊã©Âô®Á™óÂè£ÂÖ≥Èó≠
                    #         print("   üîÑ Â§ÑÁêÜÊñá‰ª∂ÈÄâÊã©Âô®Á™óÂè£Áä∂ÊÄÅ...")
                    #         
                    #         # ÊñπÊ≥ï1aÔºöÊåâESCÈîÆÂÖ≥Èó≠Êñá‰ª∂ÈÄâÊã©Âô®
                    #         try:
                    #             page.keyboard.press("Escape")
                    #             page.wait_for_timeout(500)
                    #             print("   ‚úÖ Â∑≤ÊåâESCÈîÆÂÖ≥Èó≠Êñá‰ª∂ÈÄâÊã©Âô®")
                    #         except:
                    #             pass
                    #         
                    #         # ÊñπÊ≥ï1bÔºöÁÇπÂáªÈ°µÈù¢ÂÖ∂‰ªñÂå∫Âüü
                    #         try:
                    #             # ÁÇπÂáªÈ°µÈù¢Á©∫ÁôΩÂå∫ÂüüÔºåÁ°Æ‰øùÁÑ¶ÁÇπÁ¶ªÂºÄÊñá‰ª∂ÈÄâÊã©Âô®
                    #             page.click("body", position={"x": 400, "y": 200})
                    #             page.wait_for_timeout(500)
                    #             print("   ‚úÖ Â∑≤ÁÇπÂáªÈ°µÈù¢Á©∫ÁôΩÂå∫Âüü")
                    #         except:
                    #             pass
                    #         
                    #         # ÊñπÊ≥ï1cÔºö‰ΩøÁî®JavaScriptÂÖ≥Èó≠ÂèØËÉΩÁöÑÊ®°ÊÄÅÂØπËØùÊ°Ü
                    #         try:
                    #             close_dialog_js = """
                    #             // Â∞ùËØïÂÖ≥Èó≠ÂèØËÉΩÁöÑÊ®°ÊÄÅÂØπËØùÊ°Ü
                    #             const dialogs = document.querySelectorAll('[role="dialog"], .dialog, .modal, .overlay');
                    #             dialogs.forEach(dialog => {
                    #                 if (dialog.style.display !== 'none') {
                    #                     dialog.style.display = 'none';
                    #                 }
                    #             });
                    #             
                    #             // Â∞ùËØïÁÇπÂáªÂÖ≥Èó≠ÊåâÈíÆ
                    #             const closeButtons = document.querySelectorAll('[aria-label*="ÂÖ≥Èó≠"], [aria-label*="Close"], .close-button, [data-test-id*="close"]');
                    #             closeButtons.forEach(btn => {
                    #                 if (btn.offsetParent !== null) { // Â¶ÇÊûúÂÖÉÁ¥†ÂèØËßÅ
                    #                     btn.click();
                    #                 }
                    #             });
                    #             
                    #             // ÁßªÈô§ÂèØËÉΩÁöÑÈÅÆÁΩ©Â±Ç
                    #             const overlays = document.querySelectorAll('.overlay, .backdrop, .mask');
                    #             overlays.forEach(overlay => {
                    #                 if (overlay.style.display !== 'none') {
                    #                     overlay.style.display = 'none';
                    #                 }
                    #             });
                    #             
                    #             return true;
                    #             """
                    #             
                    #             page.evaluate(close_dialog_js)
                    #             page.wait_for_timeout(500)
                    #             print("   ‚úÖ Â∑≤ÊâßË°åJavaScriptÂÖ≥Èó≠ÂØπËØùÊ°Ü")
                    #         except:
                    #             pass
                    #         
                    #         # ÊñπÊ≥ï1dÔºöÊü•ÊâæÂπ∂ÁÇπÂáªÂÖ∑‰ΩìÁöÑÂÖ≥Èó≠ÊåâÈíÆ
                    #         try:
                    #             close_button_selectors = [
                    #                 "[aria-label='ÂÖ≥Èó≠']",
                    #                 "[aria-label='Close']",
                    #                 "button:has-text('ÂÖ≥Èó≠')",
                    #                 "button:has-text('Close')",
                    #                 "button:has-text('√ó')",
                    #                 ".close-button",
                    #                 "[data-test-id*='close']",
                    #                 ".modal-close",
                    #                 ".dialog-close"
                    #             ]
                    #             
                    #             for selector in close_button_selectors:
                    #                 try:
                    #                     close_btn = page.locator(selector)
                    #                     if close_btn.count() > 0 and close_btn.first.is_visible():
                    #                         close_btn.first.click()
                    #                         page.wait_for_timeout(300)
                    #                         print(f"   ‚úÖ Â∑≤ÁÇπÂáªÂÖ≥Èó≠ÊåâÈíÆ: {selector}")
                    #                         break
                    #                 except:
                    #                     continue
                    #                     
                    #         except:
                    #             pass
                    #         
                    #         # ÊñπÊ≥ï1eÔºöÁ≠âÂæÖÊñá‰ª∂‰∏ä‰º†ÂÆåÊàêÁöÑÊåáÁ§∫Âπ∂Â§ÑÁêÜUIÁä∂ÊÄÅ
                    #         try:
                    #             print("   ‚è≥ Á≠âÂæÖÊñá‰ª∂Â§ÑÁêÜÂÆåÊàê...")
                    #             
                    #             # Á≠âÂæÖÊñá‰ª∂ÂêçÂá∫Áé∞ÊàñÂÖ∂‰ªñ‰∏ä‰º†ÂÆåÊàêÁöÑÊ†áÂøó
                    #             try:
                    #                 page.wait_for_selector("text=ËøúÁ®ãÊâπÈáèÂä†Âüü", timeout=8000)
                    #                 print("   ‚úÖ Ê£ÄÊµãÂà∞Êñá‰ª∂ÂêçÊòæÁ§∫Ôºå‰∏ä‰º†ÂÆåÊàê")
                    #             except:
                    #                 # Â¶ÇÊûúÊ≤°ÊúâÊ£ÄÊµãÂà∞Êñá‰ª∂ÂêçÔºåÂ∞ùËØïÊ£ÄÊµãÂÖ∂‰ªñ‰∏ä‰º†ÂÆåÊàêÁöÑÊ†áÂøó
                    #                 try:
                    #                     # Ê£ÄÊü•ÊòØÂê¶Êúâ"‰∏ä‰º†ÊàêÂäü"ÊàñÁ±ª‰ººÁöÑÊèêÁ§∫
                    #                     success_indicators = [
                    #                         "text=‰∏ä‰º†ÊàêÂäü",
                    #                         "text=Upload successful",
                    #                         "text=Êñá‰ª∂Â∑≤‰∏ä‰º†",
                    #                         "[data-test-id*='upload-success']",
                    #                         ".upload-success"
                    #                     ]
                    #                     
                    #                     for indicator in success_indicators:
                    #                         try:
                    #                             page.wait_for_selector(indicator, timeout=2000)
                    #                             print(f"   ‚úÖ Ê£ÄÊµãÂà∞‰∏ä‰º†ÊàêÂäüÊ†áÂøó: {indicator}")
                    #                             break
                    #                         except:
                    #                             continue
                    #                     else:
                    #                         print("   ‚ÑπÔ∏è  Êú™Ê£ÄÊµãÂà∞ÊòéÁ°ÆÁöÑ‰∏ä‰º†ÂÆåÊàêÊ†áÂøóÔºå‰ΩÜÁªßÁª≠ÊâßË°å...")
                    #                 except:
                    #                     print("   ‚ÑπÔ∏è  Êñá‰ª∂Â§ÑÁêÜÁä∂ÊÄÅÊú™Áü•Ôºå‰ΩÜÁªßÁª≠ÊâßË°å...")
                    #             
                    #             # ÊúÄÂêéÂÜçÊ¨°Â∞ùËØïÂÖ≥Èó≠‰ªª‰ΩïÊÆãÁïôÁöÑÂØπËØùÊ°Ü
                    #             page.keyboard.press("Escape")
                    #             page.wait_for_timeout(500)
                    #             
                    #         except:
                    #             pass
                    #         
                    #         upload_success = True
                    #     else:
                    #         print("   ‚ùå ÊñπÊ≥ï1Â§±Ë¥•ÔºöÊú™ÊâæÂà∞Êñá‰ª∂ËæìÂÖ•Ê°Ü")
                    #         
                    # except Exception as e:
                    #     print(f"   ‚ùå ÊñπÊ≥ï1Â§±Ë¥•: {e}")
                    
                    # # ÊñπÊ≥ï2Ôºö‰ΩøÁî®Êñá‰ª∂ÈÄâÊã©Âô®ÔºàÈÄöËøáÂèØËßÅÊåâÈíÆËß¶ÂèëÔºâ
                    # if not upload_success:
                    #     try:
                    #         print("   üìÇ ÊñπÊ≥ï2ÔºöÈÄöËøáÂèØËßÅÊåâÈíÆËß¶ÂèëÊñá‰ª∂ÈÄâÊã©Âô®...")
                    #         
                    #         # Â∞ùËØï‰∏çÂêåÁöÑÂèØËßÅÊåâÈíÆÊù•Ëß¶ÂèëÊñá‰ª∂ÈÄâÊã©Âô®
                    #         trigger_buttons = [
                    #             "[data-test-id=\"local-image-file-uploader-button\"]",
                    #             "[data-test-id=\"uploader-images-files-button-advanced\"] button",
                    #             "button:has-text('ÈÄâÊã©Êñá‰ª∂')",
                    #             "button:has-text('‰∏ä‰º†Êñá‰ª∂')",
                    #             "button:has-text('Browse')",
                    #             "button:has-text('Choose')",
                    #             ".file-upload-button",
                    #             ".upload-button"
                    #         ]
                    #         
                    #         for button_selector in trigger_buttons:
                    #             try:
                    #                 print(f"     üéØ Â∞ùËØïÊåâÈíÆ: {button_selector}")
                    #                 button = page.locator(button_selector)
                    #                 
                    #                 if button.count() > 0 and button.first.is_visible():
                    #                     print(f"     ‚úÖ ÊâæÂà∞ÂèØËßÅÊåâÈíÆ: {button_selector}")
                    #                     
                    #                     # ‰ΩøÁî®Êñá‰ª∂ÈÄâÊã©Âô®
                    #                     with page.expect_file_chooser(timeout=10000) as fc_info:
                    #                         button.first.click()
                    #                     
                    #                     file_chooser = fc_info.value
                    #                     file_chooser.set_files(markdown_file)
                    #                     
                    #                     print("   ‚úÖ ÊñπÊ≥ï2ÊàêÂäüÔºöÊñá‰ª∂ÈÄâÊã©Âô®‰∏ä‰º†")
                    #                     upload_success = True
                    #                     break
                    #                     
                    #             except Exception as e:
                    #                 print(f"     ‚ùå ÊåâÈíÆ {button_selector} Â§±Ë¥•: {e}")
                    #                 continue
                    #                 
                    #     except Exception as e:
                    #         print(f"   ‚ùå ÊñπÊ≥ï2Â§±Ë¥•: {e}")
                    
                    # ÊñπÊ≥ï3Ôºö‰ΩøÁî®ÊãñÊãΩÊñπÂºèÔºàÂ¶ÇÊûúÊîØÊåÅÔºâ
                    # if not upload_success:
                    #     try:
                    #         print("   üìÇ ÊñπÊ≥ï3ÔºöÂ∞ùËØïÊãñÊãΩ‰∏ä‰º†...")
                            
                    #         # Êü•ÊâæÊãñÊãΩÂå∫Âüü
                    #         drop_zones = [
                    #             ".upload-drop-zone",
                    #             ".file-drop-zone",
                    #             "[data-filedrop-id]",
                    #             ".drag-drop-area"
                    #         ]
                            
                    #         for zone_selector in drop_zones:
                    #             try:
                    #                 drop_zone = page.locator(zone_selector)
                    #                 if drop_zone.count() > 0:
                    #                     print(f"     üéØ ÊâæÂà∞ÊãñÊãΩÂå∫Âüü: {zone_selector}")
                                        
                    #                     # Ê®°ÊãüÊãñÊãΩÊñá‰ª∂
                    #                     drop_zone.first.set_input_files(markdown_file)
                    #                     print("   ‚úÖ ÊñπÊ≥ï3ÊàêÂäüÔºöÊãñÊãΩ‰∏ä‰º†")
                    #                     upload_success = True
                    #                     break
                                        
                    #             except Exception as e:
                    #                 print(f"     ‚ùå ÊãñÊãΩÂå∫Âüü {zone_selector} Â§±Ë¥•: {e}")
                    #                 continue
                                    
                    #     except Exception as e:
                    #         print(f"   ‚ùå ÊñπÊ≥ï3Â§±Ë¥•: {e}")
                    
                    # # ÊñπÊ≥ï4ÔºöJavaScriptÁõ¥Êé•Êìç‰ΩúÔºàÊúÄÂêéÁöÑÊâãÊÆµÔºâ
                    # if not upload_success:
                    #     try:
                    #         print("   üìÇ ÊñπÊ≥ï4ÔºöJavaScriptÁõ¥Êé•Êìç‰Ωú...")
                    #         
                    #         # ‰ΩøÁî®JavaScriptÁõ¥Êé•Êìç‰ΩúÊñá‰ª∂ËæìÂÖ•
                    #         js_code = f"""
                    #         const fileInput = document.querySelector('input[type="file"][name="Filedata"]');
                    #         if (fileInput) {{
                    #             // ÂàõÂª∫‰∏Ä‰∏™FileÂØπË±°
                    #             const file = new File(['file content'], '{os.path.basename(markdown_file)}', {{
                    #                 type: 'text/markdown'
                    #             }});
                    #             
                    #             // ÂàõÂª∫FileList
                    #             const dt = new DataTransfer();
                    #             dt.items.add(file);
                    #             fileInput.files = dt.files;
                    #             
                    #             // Ëß¶Âèëchange‰∫ã‰ª∂
                    #             const event = new Event('change', {{ bubbles: true }});
                    #             fileInput.dispatchEvent(event);
                    #             
                    #             return true;
                    #         }}
                    #         return false;
                    #         """
                    #         
                    #         result = page.evaluate(js_code)
                    #         if result:
                    #             print("   ‚úÖ ÊñπÊ≥ï4ÊàêÂäüÔºöJavaScriptÊìç‰Ωú")
                    #             upload_success = True
                    #         else:
                    #             print("   ‚ùå ÊñπÊ≥ï4Â§±Ë¥•ÔºöJavaScriptÊìç‰ΩúÂ§±Ë¥•")
                    #             
                    #     except Exception as e:
                    #         print(f"   ‚ùå ÊñπÊ≥ï4Â§±Ë¥•: {e}")
                    
                    # Ê£ÄÊü•‰∏ä‰º†ÁªìÊûú
                #     if upload_success:
                #         print("‚úÖ Êñá‰ª∂‰∏ä‰º†ÊàêÂäü")
                        
                #         # Á≠âÂæÖÊñá‰ª∂Â§ÑÁêÜÂÆåÊàê
                #         print("   üîÑ Á≠âÂæÖÊñá‰ª∂Â§ÑÁêÜÂÆåÊàê...")
                #         page.wait_for_timeout(5000)
                        
                #         # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñá‰ª∂Â§ÑÁêÜÂÆåÊàêÁöÑÊåáÁ§∫
                #         try:
                #             # Á≠âÂæÖÊñá‰ª∂ÂêçÂá∫Áé∞
                #             page.wait_for_selector("text=ËøúÁ®ãÊâπÈáèÂä†Âüü", timeout=10000)
                #             print("   ‚úÖ Ê£ÄÊµãÂà∞Êñá‰ª∂ÂêçÊòæÁ§∫ÔºåÂ§ÑÁêÜÂÆåÊàê")
                #         except:
                #             print("   ‚ÑπÔ∏è  Êú™Ê£ÄÊµãÂà∞Êñá‰ª∂ÂêçÔºå‰ΩÜÁªßÁª≠ÊâßË°å...")
                            
                #     else:
                #         print("‚ùå ÊâÄÊúâ‰∏ä‰º†ÊñπÊ≥ïÈÉΩÂ§±Ë¥•‰∫Ü")
                #         print("ËØ∑ÊâãÂä®‰∏ä‰º†Êñá‰ª∂ÔºåÁÑ∂ÂêéÊåâÂõûËΩ¶ÁªßÁª≠...")
                #         input("ÊåâÂõûËΩ¶ÈîÆÁªßÁª≠...")
                        
                # else:
                #     print(f"‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®: {markdown_file}")
                #     return
                
                # 6. ËæìÂÖ•ÊèêÁ§∫ËØç
                print("6Ô∏è‚É£ ËæìÂÖ•ÂõæÁâáÁîüÊàêÊèêÁ§∫...")
                
                try:
                    textbox = page.get_by_role("textbox", name="Âú®Ê≠§Â§ÑËæìÂÖ•ÊèêÁ§∫")
                    if textbox.count() > 0:
                        print("   üéØ ÊâæÂà∞ÊèêÁ§∫ËæìÂÖ•Ê°Ü")
                        # textbox.click()
                        # textbox.set_input_files(markdown_file)
                        page.wait_for_timeout(500)
                        textbox.fill("")
                        page.wait_for_timeout(200)
                        textbox.fill(prompt_text)
                        print("   ‚úÖ ÊèêÁ§∫ËØçËæìÂÖ•ÊàêÂäü")
                    else:
                        print("   üîç ‰ΩøÁî®ÈîÆÁõòËæìÂÖ•ÊñπÂºè...")
                        page.keyboard.type(prompt_text)
                        print("   ‚úÖ ÈîÆÁõòËæìÂÖ•ÊàêÂäü")
                        
                except Exception as e:
                    print(f"   ‚ùå ÊèêÁ§∫ËØçËæìÂÖ•Â§±Ë¥•: {e}")
                
                page.wait_for_timeout(1000)
                page.wait_for_load_state("networkidle")
                # 7. ÂèëÈÄÅËØ∑Ê±Ç
                print("7Ô∏è‚É£ ÂèëÈÄÅÂõæÁâáÁîüÊàêËØ∑Ê±Ç...")
                try:
                    send_button = page.get_by_role("button", name="ÂèëÈÄÅ")
                    if send_button.count() > 0:
                        send_button.click()
                        print("‚úÖ Â∑≤ÁÇπÂáªÂèëÈÄÅÊåâÈíÆ")
                    else:
                        page.keyboard.press("Enter")
                        print("‚úÖ Â∑≤ÊåâÂõûËΩ¶ÈîÆÂèëÈÄÅ")
                except Exception as e:
                    print(f"‚ö†Ô∏è  ÂèëÈÄÅÂ§±Ë¥•ÔºåÂ∞ùËØïÂõûËΩ¶: {e}")
                    page.keyboard.press("Enter")
                
                # 8. Á≠âÂæÖÂõæÁâáÁîüÊàêÂÆåÊàê
                print("8Ô∏è‚É£ Á≠âÂæÖÂõæÁâáÁîüÊàêÂÆåÊàê...")
                print("   ‚è≥ ËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂçÅÁßíÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ...")
                
                try:
                    page.wait_for_selector("[data-test-id=\"download-generated-image-button\"]", timeout=120000)
                    print("‚úÖ ÂõæÁâáÁîüÊàêÂÆåÊàêÔºå‰∏ãËΩΩÊåâÈíÆÂ∑≤Âá∫Áé∞")
                except:
                    print("‚ö†Ô∏è  Á≠âÂæÖË∂ÖÊó∂Ôºå‰ΩÜÁªßÁª≠Â∞ùËØï‰∏ãËΩΩ...")
                
                # 9. ‰∏ãËΩΩÁîüÊàêÁöÑÂõæÁâá - ÁÆÄÂåñÂ§ÑÁêÜ
                print("9Ô∏è‚É£ ‰∏ãËΩΩÁîüÊàêÁöÑÂõæÁâá...")
                
                try:
                    # ÁÆÄÂçïÁõ¥Êé•ÁöÑ‰∏ãËΩΩÊñπÂºè
                    page.wait_for_timeout(5000)
                    page.wait_for_load_state("networkidle")
                    with page.expect_download(timeout=30000) as download_info:
                        page.locator("[data-test-id=\"download-generated-image-button\"]").click()
                    
                    download = download_info.value
                    print("‚úÖ ‰∏ãËΩΩÂºÄÂßã")
                    page.wait_for_timeout(5000)
                    
                except Exception as e:
                    print(f"‚ùå ‰∏ãËΩΩÂ§±Ë¥•: {e}")
                    print("ËØ∑ÊâãÂä®ÁÇπÂáª‰∏ãËΩΩÊåâÈíÆ")
                
                print("-" * 60)
                print("üéâ GeminiÂõæÁâáÁîüÊàêÊµÅÁ®ãÂÆåÊàêÔºÅ")
                
                # ÊòæÁ§∫‰∏ãËΩΩÁªìÊûú
                print("\nüìã ‰∏ãËΩΩÁªìÊûú:")
                if downloaded_files:
                    for i, file_path in enumerate(downloaded_files, 1):
                        print(f"{i}. {os.path.basename(file_path)}")
                        print(f"   üìÅ Ë∑ØÂæÑ: {file_path}")
                        if os.path.exists(file_path):
                            print(f"   üìä Â§ßÂ∞è: {os.path.getsize(file_path)} Â≠óËäÇ")
                            print(f"   ‚úÖ Áä∂ÊÄÅ: ‰∏ãËΩΩÊàêÂäü")
                        else:
                            print(f"   ‚ùå Áä∂ÊÄÅ: Êñá‰ª∂‰∏çÂ≠òÂú®")
                        print()
                else:
                    print("‚ö†Ô∏è  Ê≤°ÊúâÊ£ÄÊµãÂà∞‰∏ãËΩΩÊñá‰ª∂ÔºåËØ∑Ê£ÄÊü•downloadsÁõÆÂΩï")
                
                print(f"üìÅ ÊâÄÊúâÂõæÁâá‰øùÂ≠òÂú®: {downloads_dir}")
                
            except Exception as e:
                print(f"‚ùå ÊâßË°åËøáÁ®ã‰∏≠Âá∫Èîô: {e}")
                
    except ConnectionRefusedError:
        print("‚ùå ËøûÊé•Â§±Ë¥•ÔºöÊó†Ê≥ïËøûÊé•Âà∞ChromeÂÆû‰æã")
        
    except Exception as e:
        print(f"‚ùå ÂèëÁîüÈîôËØØ: {e}")

def main():
    """‰∏ªÂáΩÊï∞"""
    test_gemini_image_generation()

if __name__ == "__main__":
    main()
